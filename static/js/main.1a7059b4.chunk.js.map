{"version":3,"sources":["Delete.js","App.js","serviceWorker.js","index.js"],"names":["TodoList","useState","id","uuid","text","items","setItems","Container","style","marginTop","className","ListGroup","marginBottom","TransitionGroup","map","CSSTransition","key","timeout","classNames","Item","Button","variant","size","onClick","filter","item","prompt","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8SAgDeA,MA3Cf,WAAqB,IAAD,EACQC,mBAAS,CACjC,CAAEC,GAAIC,cAAQC,KAAM,UACpB,CAAEF,GAAIC,cAAQC,KAAM,SACpB,CAAEF,GAAIC,cAAQC,KAAM,cACpB,CAAEF,GAAIC,cAAQC,KAAM,WALJ,mBACXC,EADW,KACJC,EADI,KAOlB,OACE,kBAACC,EAAA,EAAD,CAAWC,MAAO,CAAEC,UAAW,QAAUC,UAAU,aACjD,kBAACC,EAAA,EAAD,CAAWH,MAAO,CAAEI,aAAc,SAChC,kBAACC,EAAA,EAAD,CAAiBH,UAAU,aACxBL,EAAMS,KAAI,gBAAGZ,EAAH,EAAGA,GAAIE,EAAP,EAAOA,KAAP,OACT,kBAACW,EAAA,EAAD,CAAeC,IAAKd,EAAIe,QAAS,IAAKC,WAAW,QAC/C,kBAACP,EAAA,EAAUQ,KAAX,KACE,kBAACC,EAAA,EAAD,CACEV,UAAU,aACVW,QAAQ,SACRC,KAAK,KACLC,QAAS,kBACPjB,GAAS,SAACD,GAAD,OAAWA,EAAMmB,QAAO,SAACC,GAAD,OAAUA,EAAKvB,KAAOA,UAL3D,QAUCE,SAMX,kBAACgB,EAAA,EAAD,CACEG,QAAS,WACP,IAAMnB,EAAOsB,OAAO,mBAChBtB,GACFE,GAAS,SAACD,GAAD,4BAAeA,GAAf,CAAsB,CAAEH,GAAIC,cAAQC,eAJnD,uCCxBSuB,MARf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,QCMckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1a7059b4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Container, ListGroup, Button } from \"react-bootstrap\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { v4 as uuid } from \"uuid\";\n\nfunction TodoList() {\n  const [items, setItems] = useState([\n    { id: uuid(), text: \"Banana\" },\n    { id: uuid(), text: \"Apple\" },\n    { id: uuid(), text: \"strawberry\" },\n    { id: uuid(), text: \"Mango\" },\n  ]);\n  return (\n    <Container style={{ marginTop: \"2rem\" }} className=\"container\">\n      <ListGroup style={{ marginBottom: \"1rem\" }}>\n        <TransitionGroup className=\"todo-list\">\n          {items.map(({ id, text }) => (\n            <CSSTransition key={id} timeout={500} classNames=\"item\">\n              <ListGroup.Item>\n                <Button\n                  className=\"remove-btn\"\n                  variant=\"danger\"\n                  size=\"sm\"\n                  onClick={() =>\n                    setItems((items) => items.filter((item) => item.id !== id))\n                  }\n                >\n                  &times;\n                </Button>\n                {text}\n              </ListGroup.Item>\n            </CSSTransition>\n          ))}\n        </TransitionGroup>\n      </ListGroup>\n      <Button\n        onClick={() => {\n          const text = prompt(\"Enter some text\");\n          if (text) {\n            setItems((items) => [...items, { id: uuid(), text }]);\n          }\n        }}\n      >\n        Add Your Lovely Fruit To The List\n      </Button>\n    </Container>\n  );\n}\nexport default TodoList;\n","import React from \"react\";\nimport \"./App.scss\";\nimport TodoList from \"./Delete\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}